'use strict'

const assert = require('chai').assert
const proxyquire = require('proxyquire')
const spooks = require('spooks')

const modulePath = '../../src/match'

suite('match:', () => {
  test('require does not throw', () => {
    assert.doesNotThrow(() => {
      require(modulePath)
    })
  })

  test('require returns function', () => {
    assert.isFunction(require(modulePath))
  })

  suite('require, results.push returns true:', () => {
    let log, resume, results, match

    setup(() => {
      log = {}
      resume = spooks.fn({ name: 'resume', log })
      results = {
        walk: [
          {
            on: spooks.fn({ name: 'on', log: log }),
            pause: spooks.fn({ name: 'pause', log: log, results: [ resume ] })
          }
        ],
        push: [ true ]
      }
      match = proxyquire(modulePath, {
        './walk': spooks.fn({
          name: 'walk',
          log: log,
          results: results.walk
        }),
        './datastream': spooks.ctor({
          name: 'DataStream',
          log: log,
          archetype: { instance: { push: () => {}, emit: () => {} } },
          results: results
        })
      })
    })

    test('match expects two arguments', () => {
      assert.lengthOf(match, 2)
    })

    test('match does not throw with match function', () => {
      assert.doesNotThrow(() => match(null, () => {}))
    })

    test('match does not throw with match string', () => {
      assert.doesNotThrow(() => match(null, ' '))
    })

    test('match throws with empty match string', () => {
      assert.throws(() => match(null, ''))
    })

    test('match does not throw with match regex', () => {
      assert.doesNotThrow(() => match(null, /.*/))
    })

    test('match throws with invalid match arg', () => {
      assert.throws(() => match(null, {}))
    })

    test('match returns stream', () => {
      assert.isFunction(match(null, /.*/).push)
      assert.isFunction(match(null, /.*/).emit)
    })

    test('DataStream was not called', () => {
      assert.strictEqual(